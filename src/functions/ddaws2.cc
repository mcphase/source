/*-----------------------------------------------------------------------------*\
| Matpack special functions - Dawson_2(x) Dawson's function           ddaws2.cc |
|                                                                               |
| Matpack Library Release 1.0                                                   |
| Copyright (C) 1991,1995 by Berndt M. Gammel                                   |
|                                                                               |
| Permission to  use, copy, and  distribute  Matpack  in  its entirety  and its |
| documentation  for non-commercial purpose and  without fee is hereby granted, |
| provided that this license information and copyright notice appear unmodified |
| in all copies.  This software is provided 'as is'  without express or implied |
| warranty.  In no event will the author be held liable for any damages arising |
| from the use of this software.						|
| Note that distributing Matpack 'bundled' in with any product is considered to |
| be a 'commercial purpose'.							|
| The software may be modified for your own purposes, but modified versions may |
| not be distributed without prior consent of the author.			|
|                                                                               |
| Read the  COPYRIGHT and  README files in this distribution about registration	|
| and installation of Matpack.							|
|                                                                               |
\*-----------------------------------------------------------------------------*/

#include "../../include/mpspecfunp.h"

//-----------------------------------------------------------------------------//
//
// double Dawson_2 (double x);
//
// Dawson_2(x) calculates the double precision Dawson's integral 
// for double precision argument x. 
// The definition is Dawson(x) = exp(-x^2) * integral(0 to x) exp(t^2) dt
//
// This is a translation from the Fortran version of SLATEC, FNLIB,
// CATEGORY C8C, REVISION 920618, originally written by Fullerton W.,(LANL)
// to C++.
//
// Series for DAW        on the interval  0.          to  1.00000E+00 
//                                        with weighted error   8.95E-32 
//                                         log weighted error  31.05 
//                               significant figures required  30.41 
//                                    decimal places required  31.71 
//
// Series for DAW2       on the interval  0.          to  1.60000E+01 
//                                        with weighted error   1.61E-32 
//
//                                         log weighted error  31.79 
//                               significant figures required  31.40 
//                                    decimal places required  32.62 
//
// Series for DAWA       on the interval  0.          to  6.25000E-02 
//                                        with weighted error   1.97E-32 
//                                         log weighted error  31.71 
//                               significant figures required  29.79 
//                                    decimal places required  32.64 
//
//-----------------------------------------------------------------------------//

double Dawson_2 (double x)
{
    static double dawcs[21] = { 
	-0.006351734375145949201065127736293,
	-0.2294071479677386939899824125866,
	 0.02213050093908476441683979161786,
	-0.001549265453892985046743057753375,
	 8.497327715684917456777542948066e-5,
	-3.828266270972014924994099521309e-6,
	 1.462854806250163197757148949539e-7,
	-4.851982381825991798846715425114e-9,
	 1.421463577759139790347568183304e-10,
	-3.728836087920596525335493054088e-12,
	 8.854942961778203370194565231369e-14,
	-1.920757131350206355421648417493e-15,
	 3.834325867246327588241074439253e-17,
	-7.089154168175881633584099327999e-19,
	 1.22055213588945767441690112e-20,
	-1.966204826605348760299451733333e-22,
	 2.975845541376597189113173333333e-24,
	-4.247069514800596951039999999999e-26,
	 5.734270767391742798506666666666e-28,
	-7.345836823178450261333333333333e-30,
	 8.951937667516552533333333333333e-32 
    };

    static double daw2cs[45] = { 
	-0.056886544105215527114160533733674,
	-0.31811346996168131279322878048822,
	 0.20873845413642236789741580198858,
	-0.12475409913779131214073498314784,
	 0.067869305186676777092847516423676,
	-0.033659144895270939503068230966587,
	 0.01526078127198797174368246038164,
	-0.0063483709625962148230586094788535,
	 0.0024326740920748520596865966109343,
	-8.6219541491065032038526983549637e-4,
	 2.8376573336321625302857636538295e-4,
	-8.7057549874170423699396581464335e-5,
	 2.4986849985481658331800044137276e-5,
	-6.731928676416029434460305033952e-6,
	 1.7078578785573543710504524047844e-6,
	-4.0917551226475381271896592490038e-7,
	 9.2828292216755773260751785312273e-8,
	-1.9991403610147617829845096332198e-8,
	 4.0963490644082195241210487868917e-9,
	-8.0032409540993168075706781753561e-10,
	 1.493850312876146505914322555011e-10,
	-2.6687999885622329284924651063339e-11,
	 4.5712216985159458151405617724103e-12,
	-7.5187305222043565872243727326771e-13,
	 1.1893100052629681879029828987302e-13,
	-1.8116907933852346973490318263084e-14,
	 2.6611733684358969193001612199626e-15,
	-3.773886305212941979544410990593e-16,
	 5.1727953789087172679680082229329e-17,
	-6.8603684084077500979419564670102e-18,
	 8.8123751354161071806469337321745e-19,
	-1.0974248249996606292106299624652e-19,
	 1.3261199326367178513595545891635e-20,
	-1.5562732768137380785488776571562e-21,
	 1.7751425583655720607833415570773e-22,
	-1.9695006967006578384953608765439e-23,
	 2.1270074896998699661924010120533e-24,
	-2.2375398124627973794182113962666e-25,
	 2.2942768578582348946971383125333e-26,
	-2.2943788846552928693329592319999e-27,
	 2.23917021005924536183422976e-28,
	-2.1338230616608897703678225066666e-29,
	 1.9866196585123531518028458666666e-30,
	-1.8079295866694391771955199999999e-31,
	 1.6090686015283030305450666666666e-32 
    };
    
    static double dawacs[75] = { 
	 0.01690485637765703755422637438849,
	 0.008683252278406957990536107850768,
	 2.424864042417715453277703459889e-4,
	 1.261182399572690001651949240377e-5,
	 1.066453314636176955705691125906e-6,
	 1.358159794790727611348424505728e-7,
	 2.171042356577298398904312744743e-8,
	 2.867010501805295270343676804813e-9,
	-1.901336393035820112282492378024e-10,
	-3.097780484395201125532065774268e-10,
	-1.029414876057509247398132286413e-10,
	-6.260356459459576150417587283121e-12,
	 8.563132497446451216262303166276e-12,
	 3.033045148075659292976266276257e-12,
	-2.523618306809291372630886938826e-13,
	-4.21060479544066451317546193451e-13,
	-4.431140826646238312143429452036e-14,
	 4.911210272841205205940037065117e-14,
	 1.235856242283903407076477954739e-14,
	-5.788733199016569246955765071069e-15,
	-2.28272329480735862097818395703e-15,
	 7.63714941101412647631236291759e-16,
	 3.851546883566811728777594002095e-16,
	-1.199932056928290592803237283045e-16,
	-6.31343915009457234733427028525e-17,
	 2.239559965972975375254912790237e-17,
	 9.987925830076495995132891200749e-18,
	-4.681068274322495334536246507252e-18,
	-1.436303644349721337241628751534e-18,
	 1.02082273141054111297790803213e-18,
	 1.538908873136092072837389822372e-19,
	-2.189157877645793888894790926056e-19,
	 2.156879197938651750392359152517e-21,
	 4.370219827442449851134792557395e-20,
	-8.234581460977207241098927905177e-21,
	-7.49864872125646622290320283542e-21,
	 3.282536720735671610957612930039e-21,
	 8.858064309503921116076561515151e-22,
	-9.185087111727002988094460531485e-22,
	 2.978962223788748988314166045791e-23,
	 1.972132136618471883159505468041e-22,
	-5.974775596362906638089584995117e-23,
	-2.834410031503850965443825182441e-23,
	 2.209560791131554514777150489012e-23,
	-5.439955741897144300079480307711e-26,
	-5.21354924329484866801713669647e-24,
	 1.702350556813114199065671499076e-24,
	 6.917400860836148343022185660197e-25,
	-6.540941793002752512239445125802e-25,
	 6.093576580439328960371824654636e-26,
	 1.408070432905187461501945080272e-25,
	-6.785886121054846331167674943755e-26,
	-9.799732036214295711741583102225e-27,
	 2.12124490309904133259896093916e-26,
	-5.954455022548790938238802154487e-27,
	-3.093088861875470177838847232049e-27,
	 2.854389216344524682400691986104e-27,
	-3.951289447379305566023477271811e-28,
	-5.906000648607628478116840894453e-28,
	 3.670236964668687003647889980609e-28,
	-4.839958238042276256598303038941e-30,
	-9.799265984210443869597404017022e-29,
	 4.6847737326121306061589088043e-29,
	 5.030877696993461051647667603155e-30,
	-1.547395051706028239247552068295e-29,
	 6.112180185086419243976005662714e-30,
	 1.357913399124811650343602736158e-30,
	-2.417687752768673088385304299044e-30,
	 8.369074582074298945292887587291e-31,
	 2.665413042788979165838319401566e-31,
	-3.811653692354890336935691003712e-31,
	 1.230054721884951464371706872585e-31,
	 4.622506399041493508805536929983e-32,
	-6.120087296881677722911435593001e-32,
	 1.966024640193164686956230217896e-32 
    };

    const double eps  = 0.5*DBL_EPSILON,    
	         xsml = sqrt(eps * 1.5),
	         xbig = sqrt(0.5 / eps),
	         xmax = exp( MpMin(-log(DBL_MIN * 2.0), log(DBL_MAX) - 0.001) );

    static int ntdaw, ntdaw2, ntdawa, first = 1;
    if (first) {
	ntdaw  = initds(dawcs, 21, eps * 0.1);
	ntdaw2 = initds(daw2cs,45, eps * 0.1);
	ntdawa = initds(dawacs,75, eps * 0.1);
	first = 0;
    }

    double y = fabs(x);
    if (y > 1.0) goto L20;

    if (y <= xsml) return x;
    return x * (dcsevl(y * 2.0 * y - 1.0, dawcs, ntdaw) + 0.75);
    
  L20:
    if (y > 4.0) goto L30;
    return x * (dcsevl(y * 0.125 * y - 1.0, daw2cs, ntdaw2) + 0.25);
    
  L30:
    if (y > xmax) goto L40;
    if (y > xbig) return 0.5 / x;
    return (dcsevl(32.0 / (y * y) - 1.0, dawacs, ntdawa) + 0.5) / x;
    
  L40:
    Matpack.Warning(Mat::Underflow, "%s: %s", "Dawson_2",
		    "abs(x) so large Dawson_2(x) underflows");
    return 0.0;
}

//-----------------------------------------------------------------------------//
