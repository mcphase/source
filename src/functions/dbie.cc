/*-----------------------------------------------------------------------------*\
| Matpack special functions - Airy function exponentially scaled        dbie.cc |
|                                                                               |
| MatPack Library Release 1.0                                                   |
| Copyright (C) 1991,1995 by Berndt M. Gammel                                   |
|                                                                               |
| Permission to  use, copy, and  distribute  Matpack  in  its entirety  and its |
| documentation  for non-commercial purpose and  without fee is hereby granted, |
| provided that this license information and copyright notice appear unmodified |
| in all copies.  This software is provided 'as is'  without express or implied |
| warranty.  In no event will the author be held liable for any damages arising |
| from the use of this software.						|
| Note that distributing Matpack 'bundled' in with any product is considered to |
| be a 'commercial purpose'.							|
| The software may be modified for your own purposes, but modified versions may |
| not be distributed without prior consent of the author.			|
|                                                                               |
| Read the  COPYRIGHT and  README files in this distribution about registration	|
| and installation of Matpack.							|
|                                                                               |
\*-----------------------------------------------------------------------------*/

#include "../../include/mpspecfunp.h"

//-----------------------------------------------------------------------------//
//
// double AiryExpBi (double x);
//
// AiryExpBi(x) calculates the double precision Airy function of the 
// second kind or the double precision exponentially scaled Airy 
// function of the second kind, depending on the value of the 
// double precision argument x. Returns 
//     Bi(x)                      for x <= 0.0
//     Bi(x)*exp( -2/3 * x^(3/2)) for x >= 0.0 
//
// This is a translation from the Fortran version of SLATEC, FNLIB,
// CATEGORY C10D, REVISION 891214, originally written by Fullerton W.,(LANL)
// to C++.
//
// Series for BIF        on the interval -1.00000E+00 to  1.00000E+00 
//                                        with weighted error   1.45E-32 
//                                         log weighted error  31.84 
//                               significant figures required  30.85 
//                                    decimal places required  32.40 
//
// Series for BIG        on the interval -1.00000E+00 to  1.00000E+00 
//                                        with weighted error   1.29E-33 
//                                         log weighted error  32.89 
//                               significant figures required  31.48 
//                                    decimal places required  33.45 
//
// Series for BIF2       on the interval  1.00000E+00 to  8.00000E+00 
//                                        with weighted error   6.08E-32 
//                                         log weighted error  31.22 
//                        approx significant figures required  30.8 
//                                    decimal places required  31.80 
//
// Series for BIG2       on the interval  1.00000E+00 to  8.00000E+00 
//                                        with weighted error   4.91E-33 
//                                         log weighted error  32.31 
//                        approx significant figures required  31.6 
//                                    decimal places required  32.90 
//
// Series for BIP1       on the interval  1.25000E-01 to  3.53553E-01 
//                                        with weighted error   1.06E-32 
//                                         log weighted error  31.98 
//                               significant figures required  30.61 
//                                    decimal places required  32.81 
//
// Series for BIP2       on the interval  0.          to  1.25000E-01 
//                                        with weighted error   4.04E-33 
//                                         log weighted error  32.39 
//                               significant figures required  31.15 
//                                    decimal places required  33.37 
//
//-----------------------------------------------------------------------------//

double AiryExpBi (double x)
{
    static double bifcs[13] = {
	-0.016730216471986649483537423928176,
	0.10252335834249445611426362777757,
	0.0017083092507381516539429650242013,
	1.186254546774468117921645921004e-5,
	4.4932907017792133694531887927242e-8,
	1.0698207143387889067567767663628e-10,
	1.7480643399771824706010517628573e-13,
	2.0810231071761711025881891834399e-16,
	1.8849814695665416509927971733333e-19,
	1.3425779173097804625882666666666e-22,
	7.7159593429658887893333333333333e-26,
	3.6533879617478566399999999999999e-29,
	1.4497565927953066666666666666666e-32 
    };

    static double bigcs[13] = { 
	0.022466223248574522283468220139024,
	0.037364775453019545441727561666752,
	4.4476218957212285696215294326639e-4,
	2.4708075636329384245494591948882e-6,
	7.9191353395149635134862426285596e-9,
	1.6498079851827779880887872402706e-11,
	2.4119906664835455909247501122841e-14,
	2.6103736236091436985184781269333e-17,
	2.1753082977160323853123792e-20,
	1.4386946400390433219483733333333e-23,
	7.7349125612083468629333333333333e-27,
	3.4469292033849002666666666666666e-30,
	1.2938919273216e-33 
    };

    static double bif2cs[15] = {
	0.0998457269381604104468284257993,
	0.47862497786300553772211467318231,
	0.025155211960433011771324415436675,
	5.8206938852326456396515697872216e-4,
	7.4997659644377865943861457378217e-6,
	6.1346028703493836681403010356474e-8,
	3.4627538851480632900434268733359e-10,
	1.4288910080270254287770846748931e-12,
	4.49627042983346418950564721792e-15,
	1.1142323065833011708428300106666e-17,
	2.2304791066175002081517866666666e-20,
	3.6815778736393142842922666666666e-23,
	5.0960868449338261333333333333333e-26,
	6.0003386926288554666666666666666e-29,
	6.0827497446570666666666666666666e-32 
    };

    static double big2cs[15] = {
	0.033305662145514340465176188111647,
	0.161309215123197067613287532084943,
	0.00631900730961342869121615634921173,
	1.18790456816251736389780192304567e-4,
	1.30453458862002656147116485012843e-6,
	9.37412599553521729546809615508936e-9,
	4.74580188674725153788510169834595e-11,
	1.78310726509481399800065667560946e-13,
	5.1675919278495818037427635664e-16,
	1.19004508386827125129496251733333e-18,
	2.22982880666403517277063466666666e-21,
	3.46551923027689419722666666666666e-24,
	4.53926336320504514133333333333333e-27,
	5.07884996513522346666666666666666e-30,
	4.91020674696533333333333333333333e-33 
    };

    static double bip1cs[47] = {
	-0.083220474779434474687471864707973,
	 0.011461189273711742889920226128031,
	 4.2896440718911509494134472566635e-4,
	-1.4906639379950514017847677732954e-4,
	-1.3076597267876290663136340998881e-5,
	 6.3275983961030344754535716032494e-6,
	-4.2226696982681924884778515889433e-7,
	-1.9147186298654689632835494181277e-7,
	 6.4531062845583173611038157880934e-8,
	-7.8448546771397719289748310448628e-9,
	-9.6077216623785085879198533565432e-10,
	 7.0004713316443966339006074402068e-10,
	-1.7731789132814932022083128056698e-10,
	 2.2720894783465236347282126389311e-11,
	 1.6540456313972049847032860681891e-12,
	-1.8517125559292316390755369896693e-12,
	 5.9576312477117290165680715534277e-13,
	-1.2194348147346564781055769498986e-13,
	 1.3347869253513048815386347813597e-14,
	 1.7278311524339746664384792889731e-15,
	-1.4590732013016720735268871713166e-15,
	 4.9010319927115819978994989520104e-16,
	-1.1556545519261548129262972762521e-16,
	 1.9098807367072411430671732441524e-17,
	-1.1768966854492179886913995957862e-18,
	-6.3271925149530064474537459677047e-19,
	 3.3861838880715361614130191322316e-19,
	-1.0725825321758625254992162219622e-19,
	 2.5995709605617169284786933115562e-20,
	-4.8477583571081193660962309494101e-21,
	 5.5298913982121625361505513198933e-22,
	 4.9421660826069471371748197444266e-23,
	-5.5162121924145707458069720814933e-23,
	 2.1437560417632550086631884499626e-23,
	-6.1910313387655605798785061137066e-24,
	 1.4629362707391245659830967336959e-24,
	-2.7918484471059005576177866069333e-25,
	 3.6455703168570246150906795349333e-26,
	 5.8511821906188711839382459733333e-28,
	-2.4946950487566510969745047551999e-27,
	 1.0979323980338380977919579477333e-27,
	-3.4743388345961115015034088106666e-28,
	 9.137340263534969736317108224e-29,
	-2.0510352728210629186247720959999e-29,
	 3.7976985698546461748651622399999e-30,
	-4.8479458497755565887848448e-31,
	-1.0558306941230714314205866666666e-32
    };

    static double bip2cs[88] = {
	-0.11359673758598867913797310895527,
	 0.0041381473947881595760052081171444,
	 1.3534706221193329857696921727508e-4,
	 1.042731665301535340588718345678e-5,
	 1.3474954767849907889589911958925e-6,
	 1.6965374054383983356062511163756e-7,
	-1.0096500865641624301366228396373e-8,
	-1.6729119493778475127836973095943e-8,
	-4.5815364485068383217152795613391e-9,
	 3.7366813665655477274064749384284e-10,
	 5.7669303201452448119584643502111e-10,
	 6.2181265087850324095393408792371e-11,
	-6.3294120282743068241589177281354e-11,
	-1.4915047908598767633999091989487e-11,
	 7.8896213942486771938172394294891e-12,
	 2.4960513721857797984888064000127e-12,
	-1.2130075287291659477746664734814e-12,
	-3.7404939108727277887343460402716e-13,
	 2.2377278140321476798783446931091e-13,
	 4.7490296312192466341986077472514e-14,
	-4.5261607991821224810605655831294e-14,
	-3.017227184198607264511224587602e-15,
	 9.1058603558754058327592683478908e-15,
	-9.8149238033807062926643864207709e-16,
	-1.6429400647889465253601245251589e-15,
	 5.5334834214274215451182114635164e-16,
	 2.1750479864482655984374381998156e-16,
	-1.7379236200220656971287029558087e-16,
	-1.0470023471443714959283909313604e-18,
	 3.9219145986056386925441403311462e-17,
	-1.162129368634519692582400566591e-17,
	-5.4027474491754245533735411307773e-18,
	 4.5441582123884610882675428553304e-18,
	-2.8775599625221075729427585480086e-19,
	-1.001734092722534124359616296044e-18,
	 4.4823931215068369856332561906313e-19,
	 7.6135968654908942328948982366775e-20,
	-1.4448324094881347238956060145422e-19,
	 4.0460859449205362251624847392112e-20,
	 2.0321085700338446891325190707277e-20,
	-1.9602795471446798718272758041962e-20,
	 3.4273038443944824263518958211738e-21,
	 3.7023705853905135480024651593154e-21,
	-2.6879595172041591131400332966712e-21,
	 2.8121678463531712209714454683364e-22,
	 6.0933963636177797173271119680329e-22,
	-3.8666621897150844994172977893413e-22,
	 2.5989331253566943450895651927228e-23,
	 9.7194393622938503767281175216084e-23,
	-5.9392817834375098415630478204591e-23,
	 3.8864949977113015409591960439444e-24,
	 1.5334307393617272869721512868769e-23,
	-9.7513555209762624036336521409724e-24,
	 9.6340644440489471424741339383726e-25,
	 2.3841999400208880109946748792454e-24,
	-1.6896986315019706184848044205207e-24,
	 2.7352715888928361222578444801478e-25,
	 3.566001618540957896011168502573e-25,
	-3.0234026608258827249534280666954e-25,
	 7.5002041605973930653144204823232e-26,
	 4.8403287575851388827455319838748e-26,
	-5.4364137654447888432698010297766e-26,
	 1.9281214470820962653345978809756e-26,
	 5.0116355020532656659611814172172e-27,
	-9.5040744582693253786034620869972e-27,
	 4.6372646157101975948696332245611e-27,
	 2.1177170704466954163768170577046e-29,
	-1.5404850268168594303692204548726e-27,
	 1.0387944293201213662047889194441e-27,
	-1.9890078156915416751316728235153e-28,
	-2.1022173878658495471177044522532e-28,
	 2.1353099724525793150633356670491e-28,
	-7.9040810747961342319023537632627e-29,
	-1.6575359960435585049973741763592e-29,
	 3.8868342850124112587625586496537e-29,
	-2.2309237330896866182621562424717e-29,
	 2.7777244420176260265625977404382e-30,
	 5.7078543472657725368712433782772e-30,
	-5.174308444530385280017337155528e-30,
	 1.8413280751095837198450927071569e-30,
	 4.4422562390957094598544071068647e-31,
	-9.8504142639629801547464958226943e-31,
	 5.8857201353585104884754198881995e-31,
	-9.7636075440429787961402312628595e-32,
	-1.3581011996074695047063597884122e-31,
	 1.3999743518492413270568048380345e-31,
	-5.9754904545248477620884562981118e-32,
	-4.0391653875428313641045327529856e-33 
    };

    const double atr    =  8.75069057084843450880771988210148,
	         btr    = -2.09383632135605431360096498526268,
	         eta    = 0.5 * DBL_EPSILON * 0.1,
	         x3sml  = pow(eta, 0.3333),
	         x32sml = x3sml * x3sml * 1.3104,
	         xbig   = pow(DBL_MAX, 0.6666);

    static int nbif, nbig, nbif2, nbig2, nbip1, nbip2, first = 1;
    if (first) {
	nbif  = initds(bifcs, 13, eta);
	nbig  = initds(bigcs, 13, eta);
	nbif2 = initds(bif2cs,15, eta);
	nbig2 = initds(big2cs,15, eta);
	nbip1 = initds(bip1cs,47, eta);
	nbip2 = initds(bip2cs,88, eta);
	first = 0;
    }

    double ret_val, z, theta, sqrtx, xm;

    if (x >= -1.0) goto L20;
    d9aimp(x, xm, theta);
    return xm * sin(theta);

  L20:
    if (x > 1.0) goto L30;
    z = 0.0;
    if (fabs(x) > x3sml) z = x * x * x;
    ret_val = dcsevl(z,bifcs,nbif) + 0.625 + x * (dcsevl(z,bigcs,nbig) + 0.4375);
    if (x > x32sml) ret_val *= exp(x * -2.0 * sqrt(x) / 3.0);
    return ret_val;

  L30:
    if (x > 2.0) goto L40;
    z = (x * x * x * 2.0 - 9.0) / 7.0;
    return exp(x * -2.0 * sqrt(x) / 3.0) 
	     * (dcsevl(z, bif2cs, nbif2) + 1.125 
		+ x * (dcsevl(z, big2cs, nbig2) + 0.625));

  L40:
    if (x > 4.0) goto L50;
    sqrtx = sqrt(x);
    z = atr / (x * sqrtx) + btr;
    return (dcsevl(z, bip1cs, nbip1) + 0.625) / sqrt(sqrtx);

  L50:
    sqrtx = sqrt(x);
    z = -1.0;
    if (x < xbig) z = 16.0 / (x * sqrtx) - 1.0;
    return (dcsevl(z, bip2cs, nbip2) + 0.625) / sqrt(sqrtx);
}

//-----------------------------------------------------------------------------//

